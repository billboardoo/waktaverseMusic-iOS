name: deploy

on:
# 테스트 필요 시 브랜치 변경 핑료
  push:
    branches: [ "develop", "master", "release/*" ]
  pull_request:
    branches: [ "develop", "master", "release/*" ]


  workflow_dispatch:

jobs:
  build: 
    runs-on: macos-12 
    
    env: # 환경변수
      XC_PROJ: ${{ 'WaktaverseMusic/WaktaverseMusic.xcodeproj' }}
      XC_SCHEME: ${{ 'WaktaverseMusic' }}
      XC_ARCHIVE: ${{ 'WaktaverseMusic.xcarchive' }}
    
      KEYCHAIN: ${{ 'test.keychain' }}
        
      # certificate 
      ENCRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/Appstore_key.p12.gpg' }}
      DECRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/Appstore_key.p12' }}
      CERT_ENCRYPTION_KEY: ${{ secrets.CERTS_ENCRYPTION_PWD }} # gpg로 파일 암호화할 때 사용한 암호
      CERT_EXPORT_KEY: ${{ secrets.CERT_EXPORT_PWD }} # .p12 ->gpg 후 key chain에 export할 때 사용 
      
      # provisioning
      ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/Appstore_Waktaverse_Music.mobileprovision.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/Appstore_Waktaverse_Music.mobileprovision' }}
      PROVISIONING_ENCRYPTION_KEY: ${{ secrets.PROVISION_ENCRYPTION_PWD }} # gpg로 파일 암호화할 때 사용한 암호
      
      
    steps:
    
    - uses: actions/checkout@v3
    
    # 키체인 초기화 - 임시 키체인 생성
    - name: Configure Keychain  
      run: |
        security create-keychain -p "" "$KEYCHAIN"
        security list-keychains -s "$KEYCHAIN"
        security default-keychain -s "$KEYCHAIN"
        security unlock-keychain -p "" "$KEYCHAIN"
        security set-keychain-settings
     
     
    - name : Configure Code Signing 
      run: |
        # certificate 복호화
        gpg -d -o "$DECRYPTED_CERT_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERT_ENCRYPTION_KEY" "$ENCRYPTED_CERT_FILE_PATH"
        # provisioning 복호화
        gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_PROVISION_FILE_PATH"
  
        # security를 사용하여 인증서와 개인 키를 새로 만든 키 체인으로 가져옴
        security import "$DECRYPTED_CERT_FILE_PATH" -k "$KEYCHAIN" -P "$CERT_EXPORT_KEY" -A
        security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          
        # Xcode에서 찾을 수 있는 프로비저닝 프로필 설치하기 위해 우선 프로비저닝 디렉토리를 생성
        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
        # 디버깅 용 echo 명령어
        echo `ls .github/secrets/*.mobileprovision`
          # 모든 프로비저닝 프로파일을 rename 하고 위에서 만든 디렉토리로 복사하는 과정
          for PROVISION in `ls .github/secrets/*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
          cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
        done
        
    - name: Force Xcode 13.4.1
      run: sudo xcode-select -s /Applications/Xcode_13.4.1.app

    - name : Decrypt file
      env:
        ENCRYPTED_SECURITY_FILE_PATH: ${{ '.github/secrets/Security.xcconfig.gpg' }}
        DECRYPTED_SECURITY_FILE_PATH: ${{ 'WaktaverseMusic/Security.xcconfig' }}
        SECURITY_ENCRYPTION_KEY: ${{ secrets.SECURITY_KEY }} 
      run: |  
        gpg -d -o "$DECRYPTED_SECURITY_FILE_PATH" --pinentry-mode=loopback --passphrase "$SECURITY_ENCRYPTION_KEY" "$ENCRYPTED_SECURITY_FILE_PATH"
        
    - name: auto update build number
      run: |
        echo `ls .`
        cd WaktaverseMusic
        agvtool what-marketing-version # 현재 버전정보
        xcrun agvtool new-marketing-version 1.1 # - 마켓버전
        agvtool next-version -all
               
        
   

  
    # 빌드 및 아카이브
    - name: Archive app
      run: |
        xcodebuild clean archive -project $XC_PROJ -scheme $XC_SCHEME -configuration release -archivePath $XC_ARCHIVE        
    
    
    - name: Export app
      # export 를 통해 ipa 파일 만듦
      run: |
        xcodebuild -exportArchive -archivePath $XC_ARCHIVE -exportOptionsPlist ExportOptions.plist -exportPath . -allowProvisioningUpdates
    
    
    - name: Install private API key P8
      env:
        PRIVATE_API_KEY_BASE64: ${{ secrets.PRIVATE_API_KEY_BASE64 }}
        API_KEY: ${{ secrets.APPSTORE_API_KEY_ID }}
      run: | 
        mkdir -p ~/private_keys
        echo -n "$PRIVATE_API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_$API_KEY.p8
        
        
    - name: Upload app to TestFlight
      env:
        API_KEY: ${{ secrets.APPSTORE_API_KEY_ID }}
        API_ISSUER : ${{ secrets.APPSTORE_ISSUER_ID  }}
      run: |
        echo `ls .`
        xcrun altool --output-format xml --upload-app -f WaktaverseMusic.ipa -t ios --apiKey $API_KEY --apiIssuer $API_ISSUER
        
        
